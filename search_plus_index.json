{"./":{"url":"./","title":"Introduction","keywords":"","body":"About This 这是自己学习和记录的地方 感觉以前管理文档有点乱 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"0-1.Linux基础/1-LVM扩容.html":{"url":"0-1.Linux基础/1-LVM扩容.html","title":"LVM扩容","keywords":"","body":"LVM扩容 1.LVM(Logical Volume Manager) LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷 1.1.LVM基础概念 物理存储介质（The physical media）：这里指系统的存储设备：硬盘，如：/dev/hda1、/dev/sda等等，是存储系统最低层的存储单元 物理卷（physical volume）：物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。 卷组（Volume Group）：LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。 逻辑卷（logical volume）：LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。 PE（physical extent）：每一个物理卷被划分为称为PE(Physical Extents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。 LE（logical extent）：逻辑卷也被划分为被称为LE(Logical Extents) 的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。 2.查看磁盘信息 查看主机的文件系统情况: df -Th 查看主 机的物理磁盘信息: fdisk -l # fdisk -l 磁盘 /dev/vda：53.7 GB, 53687091200 字节，104857600 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x0001b39f 设备 Boot Start End Blocks Id System /dev/vda1 * 2048 1026047 512000 83 Linux /dev/vda2 1026048 104857599 51915776 8e Linux LVM 磁盘 /dev/vdb：107.4 GB, 107374182400 字节，209715200 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x2953a37f 设备 Boot Start End Blocks Id System /dev/vdb1 2048 209715199 104856576 8e Linux LVM 磁盘 /dev/mapper/centos_template-root：48.9 GB, 48863641600 字节，95436800 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/mapper/centos_template-swap：4294 MB, 4294967296 字节，8388608 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 3.新建分区并改变格式 该步骤需要新建分区并格式化磁盘, 操作需要谨慎 [root@proxy01 ~]# fdisk /dev/vdb 欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。 使用写入命令前请三思。 Device does not contain a recognized partition table 使用磁盘标识符 0x2953a37f 创建新的 DOS 磁盘标签。 命令(输入 m 获取帮助)：n Partition type: p primary (0 primary, 0 extended, 4 free) e extended Select (default p): Using default response p 分区号 (1-4，默认 1)： 起始 扇区 (2048-209715199，默认为 2048)： 将使用默认值 2048 Last 扇区, +扇区 or +size{K,M,G} (2048-209715199，默认为 209715199)： 将使用默认值 209715199 分区 1 已设置为 Linux 类型，大小设为 100 GiB 命令(输入 m 获取帮助)： 命令(输入 m 获取帮助)： 命令(输入 m 获取帮助)：m 命令操作 a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition g create a new empty GPT partition table G create an IRIX (SGI) partition table l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition's system id u change display/entry units v verify the partition table w write table to disk and exit x extra functionality (experts only) 命令(输入 m 获取帮助)：p 磁盘 /dev/vdb：107.4 GB, 107374182400 字节，209715200 个扇区 Units = 扇区 of 1 * 512 = 512 bytes 扇区大小(逻辑/物理)：512 字节 / 512 字节 I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘标签类型：dos 磁盘标识符：0x2953a37f 设备 Boot Start End Blocks Id System /dev/vdb1 2048 209715199 104856576 83 Linux 命令(输入 m 获取帮助)：t 已选择分区 1 Hex 代码(输入 L 列出所有代码)：L 0 空 24 NEC DOS 81 Minix / 旧 Linu bf Solaris 1 FAT12 27 隐藏的 NTFS Win 82 Linux 交换 / So c1 DRDOS/sec (FAT- 2 XENIX root 39 Plan 9 83 Linux c4 DRDOS/sec (FAT- 3 XENIX usr 3c PartitionMagic 84 OS/2 隐藏的 C: c6 DRDOS/sec (FAT- 4 FAT16 4.创建物理卷 [root@proxy01 ~]# partprobe # 更新分区表 [root@proxy01 ~]# pvcreate /dev/vdb1 5.扩展卷组 [root@proxy01 ~]# vgs VG #PV #LV #SN Attr VSize VFree centos_template 1 2 0 wz--n- 6. 扩展逻辑卷 [root@proxy01 ~]# lvextend -l +100%FREE /dev/mapper/centos_template-root Size of logical volume centos_template/root changed from 7.调整文件系统的大小 首先使用 df -hT 确认分区的格式 ext4 等使用 resize2fs, xfs 使用 xfs_growfs ext4: resize2fs /dev/mapper/centos_template-root xfs: xfs_growfs /dev/mapper/centos_template-root 确认扩容是否生效: df -h Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"0-1.Linux基础/Firewalld.html":{"url":"0-1.Linux基础/Firewalld.html","title":"Firewalld","keywords":"","body":"Firewalld基础 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/0-ES/":{"url":"1-2.开源中间件/0-ES/","title":"ES","keywords":"","body":"ES Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/0-ES/Translog文件损坏.html":{"url":"1-2.开源中间件/0-ES/Translog文件损坏.html","title":"Translog文件损坏","keywords":"","body":"Translog文件损坏 相关文档 elasticsearch-shard 故障原因 机房突然断电导致 es 的 translog 文件损坏，分片无法分片 通过 _cluster/allocation/explain 可以看到具体损坏的 translog 文件 出现这种情况如果无法从副本或者快照恢复数据，就意味着可能会丢失部分数据甚至是该分片的全部数据 故障解决 官方用处理 translog 文件损坏的工具 elasticsearch-shard 该工具会将损坏的部分删除 es$ bin/elasticsearch-shard remove-corrupted-data -h Removes corrupted shard files This tool attempts to detect and remove unrecoverable corrupted data in a shard. Option Description ------ ----------- -E Configure a setting -d, --dir Index directory location on disk -h, --help show help --index Index name -s, --silent show minimal output --shard-id Shard id -v, --verbose show verbose output 有两种方式处理translog 文件： 一是：指定索引和分片号 二是：指定translog 文件完整路径 1. bin/elasticsearch-shard remove-corrupted-data --index index_name --shard-id num 2. bin/elasticsearch-shard remove-corrupted-data --dir translog_file_path 该工具会将损坏的文件列出来，然后让你选择是否 remove ........ --> translog-1799.ckp --> translog-1799.tlog --> translog-1800.ckp --> translog-1800.tlog --> translog-1801.ckp --> translog-1801.tlog --> translog-1802.ckp --> translog-1802.tlog --> translog-1803.tlog --> translog.ckp WARNING: YOU MAY LOSE DATA. ----------------------------------------------------------------------- Continue and remove corrupted data from the shard ? Confirm [y/N] y Checking existing translog files 然后根据最后的提示对该分片执行重路由 POST /_cluster/reroute' { \"commands\" : [ { \"allocate_stale_primary\" : { \"index\" : \"index_name\", \"shard\" : num, \"node\" : \"c7aAKt_2QCC0RwZCj9ZL1Q\", \"accept_data_loss\" : false } } ] }' You must accept the possibility of data loss by changing parameter `accept_data_loss` to `true`. Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/0-ES/数据节点下线.html":{"url":"1-2.开源中间件/0-ES/数据节点下线.html","title":"数据节点下线","keywords":"","body":"数据节点下线 参考文档 集群版本 ES: 7.3 Kibana: 7.3 两种情况 数据节点和非数据节点 非数据节点 master-eligible 节点下线须确保集群中剩余的master-eligible节点仍不低于minimum_master_nodes数量 否则则会造成集群无法选举 Master节点，集群崩溃 也可以提前修改minimum_master_nodes数量，确保集群正常 PUT /_cluster/settings { \"persistent\": { \"discovery.zen.minimum_master_nodes\":1 } } 其他像 Coordinating Node、 Ingest Node因不包含数据又不参与集群选举，因此直接下线即可 数据节点 很明显，需要先将 Data Node上的分片转移到其他节点上，Data Node才能下线 根据 Cluster 级别的 Allocation 设置可以排查某个 Node 7.3 版本支持 _name、 _ip、 _host 三种属性来分配分片 比如我们需要将节点 Hot51 下线，则参考下述命令 PUT _cluster/settings { \"transient\": { \"cluster.routing.allocation.exclude._name\": \"Hot51\" } } 检查验证 等待分片转移完成，可以通过 Kibana 的 Monitor 来查看正在进行的 Task 也可以通过 Dev Tool 来查看 GET _cluster/health { \"cluster_name\" : \"XXXXXX\", \"status\" : \"green\", \"timed_out\" : false, \"number_of_nodes\" : 79, \"number_of_data_nodes\" : 72, \"active_primary_shards\" : 14880, \"active_shards\" : 14906, \"relocating_shards\" : 10, \"initializing_shards\" : 0, \"unassigned_shards\" : 0, \"delayed_unassigned_shards\" : 0, \"number_of_pending_tasks\" : 0, \"number_of_in_flight_fetch\" : 0, \"task_max_waiting_in_queue_millis\" : 0, \"active_shards_percent_as_number\" : 100.0 } relocating_shards 就是正在重分配的分片数量 等待relocating_shards数量为0`就全部迁移完成 同时通过确认该节点上是否还有doc来确保迁移是否完成而不是因其他因素被中断 GET _nodes/Hot51/stats/indices?human .... \"indices\" : { \"docs\" : { \"count\" : 1627525401, \"deleted\" : 150809024 }, \"store\" : { \"size\" : \"1.1tb\", \"size_in_bytes\" : 1216926382209 }, .... 等待docs.count 为 0 即该节点无任何数据了。 然后下线该节点即可 最后别忘了移除集群中的配置 PUT _cluster/settings { \"transient\": { \"cluster.routing.allocation.exclude._name\": null } } Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/1-Nginx/":{"url":"1-2.开源中间件/1-Nginx/","title":"Nginx","keywords":"","body":"Nginx Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/1-Nginx/Nginx-BasicAuth.html":{"url":"1-2.开源中间件/1-Nginx/Nginx-BasicAuth.html","title":"Nginx BasicAuth","keywords":"","body":"Nginx Basic Auth 认证 官方文档说明 ngx_http_auth_basic_module模块实现让访问着，只有输入正确的用户密码才允许访问web内容 默认情况下nginx已经安装了ngx_http_auth_basic_module模块 生成密码 可以使用 htpasswd 或者 openssl 生成，推荐使用 openssl htpasswd -c .htpasswd username openssl passwd -crypt passwordcat .htpasswd user1:$apr1$/woC1jnP$KAh0SsVn5qeSMjTtn0E9Q0 user2:$apr1$QdR8fNLT$vbCEEzDj7LyqCMyNpSoBh/ user3:$apr1$Mr5A0e.U$0j39Hp5FfxRkneklXaMrr/ 修改配置文件 可配置段: http, server, location, limit_except 示例： server { ... auth_basic \"Administrator’s Area\"; auth_basic_user_file conf.d/.htpasswd; location /public/ { auth_basic off; } } Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/3-MySQL/":{"url":"1-2.开源中间件/3-MySQL/","title":"MySQL","keywords":"","body":"MySQL Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/3-MySQL/MySQL-Base.html":{"url":"1-2.开源中间件/3-MySQL/MySQL-Base.html","title":"MySQL Base","keywords":"","body":"MySQL基础知识 1 2 3 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/3-MySQL/MySQL-权限管理.html":{"url":"1-2.开源中间件/3-MySQL/MySQL-权限管理.html","title":"MySQL 权限管理","keywords":"","body":"MySQL权限管理 参考链接 https://cloud.tencent.com/developer/article/1656008 1. 查询、插入、更新、删除 grant select on testdb.* to user@'localhost' grant insert on testdb.* to user@'localhost' grant update on testdb.* to user@'localhost' grant delete on testdb.* to user@'localhost' 等同于 grant select, insert, update, delete on testdb.* to user@'localhost' 特殊前缀：grant select ont_%.* to reader@'%'; 2. 创建表、索引、视图、存储过程、函数 grant create on testdb.* to user@'localhost' ; grant alter on testdb.* to user@'localhost' ; grant drop on testdb.* to user@'localhost' ; 3. 创建、修改、删除数据表结构权限 grant references on testdb.* to developer@'localhost' grant create temporary tables on testdb.* to developer@'localhost' grant index on testdb.* to developer@'localhost' grant create view on testdb.* to developer@'localhost' grant show view on testdb.* to developer@'localhost' 4. 存储过程、函数 权限 grant create routine on testdb.* to developer@'localhost' -- now, can show procedure status grant alter routine on testdb.* to developer@'localhost' -- now, you can drop a procedure grant execute on testdb.* to developer@'localhost' 5. 所有权限 grant all privileges on testdb to dba@'localhost' grant all on *.* to dba@'localhost' 6. 权限查看 show grants; show grants for dba@localhost; 7. 权限撤销 grant all on *.* to dba@localhost; revoke all on *.* from dba@localhost; 8. 注意事项 grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 \"grant option\" Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/4-Redis/":{"url":"1-2.开源中间件/4-Redis/","title":"Redis","keywords":"","body":"Redis Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/5-RabbitMQ/":{"url":"1-2.开源中间件/5-RabbitMQ/","title":"RabbitMQ","keywords":"","body":"RabbitMQ Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/5-RabbitMQ/RabbitMQ-基础知识.html":{"url":"1-2.开源中间件/5-RabbitMQ/RabbitMQ-基础知识.html","title":"RabbitMQ 基础知识","keywords":"","body":"RabbitMQ 权限 安装部署 https://github.com/rabbitmq/rabbitmq-server/releases/ https://github.com/erlang/otp/releases 可采用二进制安装或者rpm包安装，推荐使用rpm包 修改配置 修改默认的存储和日志目录 vim /etc/rabbitmq/rabbitmq-env.conf RABBITMQ_MNESIA_BASE=/mnt/rabbitmq/mnesia RABBITMQ_LOG_BASE=/mnt/rabbitmq/log 网络配置调优可选 # RabbitMQ config # TCP tcp_listen_options.backlog = 4096 tcp_listen_options.nodelay = true tcp_listen_options.linger.on = true tcp_listen_options.linger.timeout = 0 tcp_listen_options.sndbuf = 32768 tcp_listen_options.recbuf = 32768 # MQTT mqtt.tcp_listen_options.backlog = 4096 mqtt.tcp_listen_options.nodelay = true mqtt.tcp_listen_options.linger.on = true mqtt.tcp_listen_options.linger.timeout = 0 mqtt.tcp_listen_options.sndbuf = 32768 mqtt.tcp_listen_options.recbuf = 32768 #STOMP stomp.tcp_listen_options.backlog = 4096 stomp.tcp_listen_options.nodelay = true stomp.tcp_listen_options.linger.on = true stomp.tcp_listen_options.linger.timeout = 0 stomp.tcp_listen_options.sndbuf = 32768 stomp.tcp_listen_options.recbuf = 32768 添加用户并赋权 如果已经有超级管理员权限的用户，则可以在开启 rabbitmq_management 插件的前提下在管理页面添加用户 用户角色分类 官方文档：https://www.rabbitmq.com/management.html#permissions 简述： none：无法登录控制台,不能访问 management plugin，通常就是普通的生产者和消费者 management：普通管理者, 仅可登陆管理控制台,但无法看到节点信息,也无法对policies进行管理 policymaker：策略制定者, management可以做的任何事外加查看、创建和删除自己的virtual hosts所属的policies和parameters monitoring：监控者, management可以做的任何事外加：列出所有virtual hosts，包括他们不能登录的virtual hosts、查看其他用户的connections和channels、查看节点级别的数据如clustering和memory使用情况、查看真正的关于所有virtual hosts的全局的统计信息,同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) administrator：超级管理员 添加 vhosts： rabbitmqctl add_vhost vhost 创建用户：rabbitmqctl add_user user passwd 设置用户角色： rabbitmqctl set_user_tags administrator 设置用户权限： rabbitmqctl set_permissions -p vhost user '.*' '.*' '.*' 三个 .* 分别对应：资源的配置、写、读权限 删除用户： rabbitmqctl delete_user user 修改密码： rabbitmqctl change_password user new_passwd 启用常用插件 文档：https://www.rabbitmq.com/plugins.html 管理界面： rabbitmq-plugins enable rabbitmq_management 状态监控： rabbitmq-plugins enable rabbitmq_top 其他 其他命令请参考： rabbitmqctl -h Users: add_user Creates a new user in the internal database. This user will have no permissions for any virtual hosts by default. authenticate_user Attempts to authenticate a user. Exits with a non-zero code if authentication fails. change_password Changes the user password clear_password Clears (resets) password and disables password login for a user clear_user_limits Clears user connection/channel limits delete_user Removes a user from the internal database. Has no effect on users provided by external backends such as LDAP list_user_limits Displays configured user limits list_users List user names and tags set_user_limits Sets user limits set_user_tags Sets user tags Access Control: clear_permissions Revokes user permissions for a vhost clear_topic_permissions Clears user topic permissions for a vhost or exchange list_permissions Lists user permissions in a virtual host list_topic_permissions Lists topic permissions in a virtual host list_user_permissions Lists permissions of a user across all virtual hosts list_user_topic_permissions Lists user topic permissions list_vhosts Lists virtual hosts set_permissions Sets user permissions for a vhost set_topic_permissions Sets user topic permissions for an exchange Monitoring, observability and health checks: list_bindings Lists all bindings on a vhost list_channels Lists all channels in the node list_ciphers Lists cipher suites supported by encoding commands list_connections Lists AMQP 0.9.1 connections for the node list_consumers Lists all consumers for a vhost list_exchanges Lists exchanges list_hashes Lists hash functions supported by encoding commands list_node_auth_attempt_stats Lists authentication attempts on the target node list_queues Lists queues and their properties list_unresponsive_queues Tests queues to respond within timeout. Lists those which did not respond ping Checks that the node OS process is up, registered with EPMD and CLI tools can authenticate with it report Generate a server status report containing a concatenation of all server status information for support purposes schema_info Lists schema database tables and their properties status Displays status of a node Parameters: clear_global_parameter Clears a global runtime parameter clear_parameter Clears a runtime parameter. list_global_parameters Lists global runtime parameters list_parameters Lists runtime parameters for a virtual host set_global_parameter Sets a runtime parameter. set_parameter Sets a runtime parameter. Policies: clear_operator_policy Clears an operator policy clear_policy Clears (removes) a policy list_operator_policies Lists operator policy overrides for a virtual host list_policies Lists all policies in a virtual host set_operator_policy Sets an operator policy that overrides a subset of arguments in user policies set_policy Sets or updates a policy Virtual hosts: add_vhost Creates a virtual host clear_vhost_limits Clears virtual host limits delete_vhost Deletes a virtual host list_vhost_limits Displays configured virtual host limits restart_vhost Restarts a failed vhost data stores and queues set_vhost_limits Sets virtual host limits trace_off trace_on Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"1-2.开源中间件/6-Kafka/":{"url":"1-2.开源中间件/6-Kafka/","title":"Kafka","keywords":"","body":"kafka Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/0-GitBook安装.html":{"url":"4-5.开源工具/0-GitBook/0-GitBook安装.html","title":"GitBook安装","keywords":"","body":"GitBook安装 1.GitBook介绍 官方给的定义： GitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书 2.安装NodeJS、Gitbook-cli 2.1.安装NodeJS Windows：下载安装即可：下载地址 (推荐12以上版本) Linux(CentOS7): curl -fsSL https://rpm.nodesource.com/setup_12.x | bash - Linux(Ubuntu): curl -sL https://deb.nodesource.com/setup_12.x | bash - 安装完成后检验： $ node -v v12.22.8 $ npm -v 6.14.15 配置国内NPM淘宝源： npm config set registry https://registry.npm.taobao.org npm config get registry 2.2.安装Gitbook-cli Gitbook-cli 是安装和管理GitBook版本库的程序 安装： npm install gitbook-cli -g 安装完成后验证： $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 安装特定版本 前提是已经安装了Gitbook-cli 查看可用版本： gitbook ls-remote 安装指定版本： gitbook fetch 3.2.3 2.3.Gitbook常用命令 初始化gitbook: gitbook init 下载安装插件等： gitbook install gitbook install安装会比较慢, 推荐npm install plugin-xxx来安装 生成静态页面： gitbook build 本地运行： gitbook serve 列出本地可用版本： gitbook ls 列出远程可用版本： gitbook ls-remote 更新到最新版本： gitbook update 卸载指定版本： gitbook uninstall 3.2.3 2.4.HelloWorld 在需要创建book的空目录中执行初始化命令： gitbook init $ gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished 然后在 README.md 追加简单的 ### HelloWorld 接着运行： gitbook serve $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 1 pages info: found 0 asset files info: >> generation finished with success in 0.4s ! Starting server ... Serving book on http://localhost:4000 浏览器访问 http://localhost:4000 即可看到 HelloWorld Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/1-MarkDown基础知识.html":{"url":"4-5.开源工具/0-GitBook/1-MarkDown基础知识.html","title":"MarkDown基础知识","keywords":"","body":"MarkDown基础知识 1.Markdown介绍 Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式 Markdown方便记忆和书写, 用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档 2.Markdown编辑器 编辑器有很多很多 MarkdownPad Typora 多数 IDE 都有插件支持 3.Markdown语法 3.1.分级标题 在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 示例： 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 3.2.斜体和粗体 使用 *或者_ 和 **或者__ 表示斜体和粗体 这是 *斜体* 这是 _斜体_ 这是 **粗体** 这是 __粗体__ _斜体**中间**加粗_ 示例： 这是 斜体 这是 斜体 这是 粗体 这是 粗体 斜体中间加粗 3.3.外链接和图片 [描述](链接地址) 为文字增加外链接 ![描述](链接地址) 图片 [百度](https://www.baidu.com) ![百度Logo](https://www.baidu.com/favicon.ico) 百度 3.4.无序列表 可以使用 -,+,* 表示无序列表 - 无序列表项 一 - 无序列表项 二 - 无序列表项 三 示例: 无序列表项 一 无序列表项 二 无序列表项 三 3.5.有序列表 使用数字和点表示有序列表。 1. 无序列表项 一 2. 无序列表项 二 3. 无序列表项 三 示例: 无序列表项 一 无序列表项 二 无序列表项 三 3.6.文字引用 使用 > 表示文字引用 > hello world hello world 3.7.代码块 使用`code`: code表示行内代码块 代码区块使用 4个空格或者一个制表符（Tab 键）, 也就是整体缩进 还可以使用 ``` 包裹多行代码并指定一种语言,也可以不指定(推荐) \\`\\`\\` print('hello world') \\`\\`\\` 3.8.删除线 使用 ~~ 包裹文字表示删除线 ~~这是一段删除线~~ 这是一段删除线 3.9.分隔线 使用三个或多个星号、中划线、下划线创建分隔线 三个或更多... --- --- 中划线 *** 星号 ___ 下划线 三个或更多... 中划线 星号 下划线 3.10.表格 Markdown 制作表格使用|来分隔不同的单元格，使用-来分隔表头和其他行 | 表头 | 表头 | | ---- | ---- | | 单元格 | 单元格 | | 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 对齐方式 -:设置内容和标题栏居右对齐 :-设置内容和标题栏居左对齐 :-:设置内容和标题栏居中对齐 3.11.忽略Markdown格式 如果需要忽略Markdown格式，只需要在Markdown关键字前使用反斜杠\\即可 3.12.高级用法 Markdown还可以表示流程图、UML图、甘特图等高级用法, 但用的少，不再赘述 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/2-目录结构.html":{"url":"4-5.开源工具/0-GitBook/2-目录结构.html","title":"目录结构","keywords":"","body":"目录结构 1.目录结构 在 Gitbook 初次初始化后会在当前目录下生成两个文件: SUMMARY.md、README.md 其中 SUMMARY.md 主要是管理目录结构的 README.md则是默认的首页 book.json 需自己创建, 配置文件 1.1.目录 SUMMARY.md 控制左边的菜单目录 他通过 Markdown的列表语法表示菜单目录间的层级关系 紧凑型 # Summary * [Introduction](README.md) * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 分散型 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) ### Part II * [feedback](part2/feedback.md) * [tools](part2/tools.md) ---- * [Last part](part3/last.md) 但维护这个目录页确是很麻烦，所有也有插件可以自动生成菜单目录, 也推荐使用插件来自动生成 菜单目录 自动生成目录的插件有两个: gitbook-plugin-summary, gitbook-plugin-aotu-summary, 个人推荐前者。 1.2.首页 README.md 文件是默认页, 因此该页面比较简单 1.2.配置文件 没有 book.json 也可以正常使用, 但如果需要个人化添加一些功能或者插件, 就需要在该文件中配置 简单示例: { \"title\": \"Hello world\", // 书的标题 \"language\":\"en\", // 语言 \"plugins\": [ // 插件 \"code\", // 添加了一个插件 \"-search\" // 去掉了一个插件 ], \"pluginsConfig\": { // 插件的配置 \"code\": { // code 插件配置了一个参数 \"copyButtons\": true } } } Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/3-模板与变量.html":{"url":"4-5.开源工具/0-GitBook/3-模板与变量.html","title":"模板与变量","keywords":"","body":"模板与变量 1.模板 Gitbook 可以使用模板来扩展定制化功能 Gitbook 可以使用 Nunjucks 和 jinja2 的语法 熟悉 Python Web 开发会比较熟悉 jinja2 jinja2 语法简单，主要使用 {} 来标记需要处理的内容 1.1.jinja2语法 jinja2 主要有两种语法: 1.控制结构(if、for): {% %} 2.变量取值: {{ var }} 1.控制结构 if: 与多数编程语言一样 # if {% if var %} 变量为: var {% endif %} # if elase {% if var1 %} var1: var {% elif var2 %} var1: var {% else %} unknow: var {% endif %} for: 类似于shell和python {% for item in items %} item: {{ item }} {% endfor %} 1.2.转义 如果想原样输出内容，则可以进行转义 比如在写这篇时，就需要将这一部分转义 {% raw %} 原样输出 {{ 原样输出 }} {% endraw %} 2.变量 Gitbook 变量主要包括: 全局变量、Book变量、Gitbook变量、File变量、Page变量、其他变量 2.1.全局变量 Gitbook 内置了很多全局变量 变量 描述 book book.json的全书信息+配置设置 gitbook GitBook特定信息 page 当前页特定信息 file 与当前页特定信息相关联的文件 readme 自述相关内容 glossary 词汇相关内容 summary 菜单相关内容 languages 多语言书籍列表 output 输出相关内容 config book.json相关内容 2.2.Book变量 该变量主要是 book.json 中配置的数据。如果想自定义变量，Book变量是最佳选择 变量 描述 book.language 多语言书的当前语言 book.[value] 在book.json中的variables下的所有其他值都可以在这里访问 可以在book.json增加自定义变量: variables { \"variables\": { \"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\" } } 2.3.Gitbook变量 该变量用来获取生成 book 的 gitbook 的基本信息 变量 描述 gitbook.time 当前时间(当你运行gitbook命令时) gitbook.version GitBook用于生成图书的版本 2.4.File变量 该变量用来获取此文件的相关信息 变量 描述 file.path 原始页面的路径 file.mtime 修改时间，上次修改文件的时间 file.type 用于编译此文件的语法解析器的名称(例如：markdown，asciidoc等) 2.5.Page变量 该变量用来获取当前页面的信息 变量 描述 page.title 页面标题 page.previous 内容表中的前一页(可以是“null”) page.next 内容表中的下一页(可以是“null”) page.dir 文本方向，基于配置(rtl或ltr) 2.6.其他变量 变量 描述 summary.parts 内容列表，可以访问整个目录(SUMMARY.md) languages.list 本书的语言环境列表 output.name 输出生成器的名称，可能的值是website，json，ebook output.format 当output.name ==“ebook”，format定义将生成的电子书格式，可能的值是pdf，epub或mobi readme.path 自述文件的路径 glossary.path 词汇表的路径 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/4-引用与继承.html":{"url":"4-5.开源工具/0-GitBook/4-引用与继承.html","title":"引用与继承","keywords":"","body":"引用与继承 1.引用 内容引用用来重用其他文件或者书籍内容机制 1.1引用本地文件 使用include标签导入其他文件的内容 {% include \"./demo.md\" %} 1.12引用其他书籍 也可以通过使用git来解析包含路径 {% include \"git+https://github.com/GitbookIO/demo.git/README.md#0.0.1\" %} Git Url格式为: git+https://user@hostname/owner/project.git/file 2.继承 通过模板继承可以重复使用模板 可以将公用的部分放在父模板中，其他页面通过继承引用父模板内容 继承链可以很长 2.1.定义父模板 {% block HeaderPage %} # This is my header page content {% endblock %} 2.2.子模板继承父模板 {% extends \"./header.md\" %} {% block HeaderPage %} # This is default header page content {% endblock %} Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/0-GitBook/5-主题插件.html":{"url":"4-5.开源工具/0-GitBook/5-主题插件.html","title":"主题插件","keywords":"","body":"主题插件 1.主题 Gitbook 提供了三种主题: Book文档, API文档, FAQ文档 默认是Book文档, 其他两种类型顾名思义 使用插件: { \"plugins\": [ \"theme-comscore\" ] } 1.1.theme-default theme-default 是默认的主题类型 但它是黑白类型的，所以一般会会用彩色主题: theme-comscore theme-comscore 会为不同级别的标题添加颜色 API文档, FAQ文档 因为没有使用, 在此不再赘述 2.插件 Gitbook 默认加载的了下述插件: livereload highlight search lunr sharing fontsettings theme-default 2.1插件的安装 1.添加到 book.json 然后使用 gitbook install 安装 (不推荐) 2.使用npm安装: npm install plugin-name 2.2插件的禁用 如果想禁用默认插件, 在默认插件前面加 - 即可 禁用 sharing { \"plugins\": [ \"-sharing\" ] } 2.3插件的配置 pluginsConfig 可以配置插件的字段配置 2.4常用插件 下述是关注度、使用比较多的插件 - alerts 提示框的增强 - anchor 锚点 - chapter 菜单折叠 - code 代码行号、复制 - favicon 网站的小图标 - github 链接到github仓库 - pagefooter 页脚说明 - prism 代码着色 - search 增强中文搜索 - section 文本折叠 - sharing 分享增强 - splitter 菜单动态伸缩 - statistics 搜索引擎点击统计，百度统计，谷歌统计 - version 多版本选择 网友插件总结 2.5参考 { \"plugins\": [ \"theme-comscore\", \"chapter-fold\", \"expandable-chapters\", \"livereload\", \"back-to-top-button\", \"splitter\", \"-lunr\", \"-search\", \"search-pro\", \"insert-logo\", \"custom-favicon\", \"tbfed-pagefooter\", \"prism\", \"anchor-navigation-ex\", \"summary\" ], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"/styles/images/icon.png\", \"style\": \"background: none; max-height: 80px; min-height: 80px\" }, \"favicon\": \"/styles/images/icon.png\", \"tbfed-pagefooter\": { \"copyright\": \"Copyright by SKYNE \", \"modify_label\": \" \", \"modify_format\": \"YYYY-MM-DD\" }, \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": false } }, \"styles\": { \"website\": \"styles/website.css\" } } 2.6自定义CSS 如果自己有前端能力还可以自己写css来扩展主题自带的 在 book.json 增加 styles 字段，并指定文件位置 { \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } } 自己不太喜欢主题自带的灰色的code和目录样式 因此自己重新定义了样式 参考如下: .book .book-body .page-wrapper .page-inner section.normal :not(pre)>code { padding: 0.1em; border-radius: 0.3em; white-space: normal; color: #f85353; background-color: #e5e5e5; } .book-summary ul.summary li.header { font-size: 1em; padding: 0.1em; font-weight: bolder; color: #364149; } Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "},"4-5.开源工具/100-Others/phpmyadmin.html":{"url":"4-5.开源工具/100-Others/phpmyadmin.html","title":"Phpmyadmin","keywords":"","body":"PhpMyadmin 参考文档 https://github.com/phpmyadmin/phpmyadmin https://hub.docker.com/phpmyadmin https://www.phpmyadmin.net/ https://docs.phpmyadmin.net/zh_CN/latest/ https://docs.phpmyadmin.net/zh_CN/latest/setup.html#securing-your-phpmyadmin-installation 安装方式 推荐使用 Docker 部署 docker run --name pma -d -e PMA_ARBITRARY=1 -p 8080:80 phpmyadmin 已有 Php环境的可以源码部署 安装环境 CentOS: 7.5 PHP: 7.3 Nginx： 1.20+ Firewalld: enable 安装步骤 Php和Nginx安装过程：略 下载最新 stable版本, 下载地址 源代码解压后放置固定目录 添加Nginx配置文件 server { listen 8088; server_name 127.0.0.1; index index.html index.php; root /alidata/www/phpMyAdmin; try_files $uri $uri/ @rewrite; location @rewrite { rewrite ^/(.*)$ /index.php/$1 last; } access_log /alidata/logs/nginx/access/t-phpMyAdmin.log; error_log /alidata/logs/nginx/error/t-phpMyAdmin-error.log; location ~ \\.php { fastcgi_index /index.php; fastcgi_pass 127.0.0.1:9000; include fastcgi_params; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } location ^~ /(.ht|.htaccess|.git|README.md|composer.json) { deny all; } } 认证方式 HTTP: 类似于Cookie，基于php的http认证机制 Cookie: 基于Cookie/Session 来存储用户会话，用户退出后，会话过期 Signon: 单点登录方式 Config: 配置文件中配置MySQL连接信息 安全性： Signon > Cookie > HTTP > Config Cookie配置方式 phpMyAdmin的默认配置文件为: config.inc.php cp config.sample.inc.php config.inc.php 默认是Cookie认证方式, 需要输入MySQL用户名密码登录, 默认是连接本机MySQL $cfg['Servers'][$i]['auth_type'] = 'cookie'; 同时用于Session加密的短语需要设置一下 $cfg['blowfish_secret'] = 'asda23123123asdfasd123123123sdasdasd'; 如果需要使之可以连接任意地址的MySQL, 则需要启用 允许自定义服务器vim libraries/config.default.php $cfg['AllowArbitraryServer'] = true; 安全加固 参考官方文档对其加固, 特别是放于公网的 高级配置 高级配置创建了一个单独的库来记录相关数据 自己根据需要是否启用高级配置 Copyright by SKYNE all right reserved，powered by Gitbook 2022-01-03 "}}